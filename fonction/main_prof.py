import cobra
from cobra import text_to_binary
from contexte import contexte
import utilitaire
import main
import dérivation
from journalisation import journaliser_action
from main import creer_arborescence_utilisateur
from coffrefort_blockchain import Blockchain
import json
import os
import ZKP
import key_exchange




def interface():  #interface pour montrer les fonctions de façon unitaire 
    #Définition des variables du cas d'exemple
    cle_derivee = "81090bcd2faf1bcda52d3561bd55bf81"
    nom_utilisateur = input(" Entrer votre nom:")
    print("Bonjour ",nom_utilisateur ,"! Que souhaitez vous faire aujourd'hui ?")
    print("-->1<-- Chiffrement/Dechiffrement")
    print("-->2<-- Hacher un message")
    print("-->3<-- Créer et ajouter une blockchain")
    print("-->4<-- Afficher une preuve de travail")
    print("-->5<-- Dériver un mot de passe")
    print("-->6<-- Génération de clés RSA")
    print("-->7<-- vérifier une signature numérique")
    print("-->8<-- Générer une clé de session")
    print("-->9<-- Quitter")
    
    cas = int(input("saisir votre choix: "))

    if cas ==  1:
        first_12_keys = cobra.extract_first_12_keys(cobra.text_to_binary(bytes.fromhex(cle_derivee)))
        print("\n\n------------------------------------------------------------------------------------------------------------------\n\n")
        print("-->1<-- Chiffrer \n\n"+"-->2<-- dechiffrer")
        cas = int(input())
        if cas == 1:
             
            binary_message = cobra.Text_To_Binary(input("Message clair: "))
            Blocks = [binary_message[i:i + 128] for i in range(0, len(binary_message), 128)] 
            encrypted_message=''
            for block in Blocks:
                message = cobra.feistel_encrypt(block,first_12_keys)
                encrypted_message += message  

            print(f"Message chiffré: {cobra.afficher_binaire_en_texte(encrypted_message)}")     
        else:
            encrypt_binary_message = cobra.convertir_texte_en_binaire(input("Message chiffré: "))
            Blocks = [encrypt_binary_message[i:i + 128] for i in range(0, len(encrypt_binary_message), 128)]
            Blocks[len(Blocks)-1] = cobra.pad_binary(Blocks[len(Blocks)-1])
            decrypted_message =''
            for block in Blocks:
                message = cobra.feistel_decrypt(block, first_12_keys) 
                decrypted_message += message
            print("\n") 
            print(f"Message déchiffré: {cobra.binary_to_text(decrypted_message)}") 

    elif cas == 2:
        message = input("Saisir le message à hacher: ")
        print(f" le message hashé est: {dérivation.sha256(message.encode("utf-8"))}")

    elif cas == 3: 
       
     #Définition des variables du cas d'exemple
     
     blockchain =  Blockchain(debug=True)


    chemin_blockchain = os.path.join("fonction", "test_blockchain.json")

    if not os.path.exists(chemin_blockchain):
        os.makedirs(os.path.dirname(chemin_blockchain), exist_ok=True)
        # Créer un fichier JSON vide pour la blockchain
        with open(chemin_blockchain, "w") as fichier:
            # Écrire une structure initiale pour une blockchain
            json.dump([], fichier, indent=4)

   

        chemin_fichier = input("Chemin du fichier : ")
        fichier_nom = os.path.basename(chemin_fichier)

        with open(chemin_fichier, "r") as f:
            contenu_fichier = f.read()

        blockchain.ajouter_fichier_au_bloc(fichier_nom, contenu_fichier, nom_utilisateur)
        blockchain.sauvegarder_blockchain(chemin_blockchain)


    elif cas == 4:

        blockchain =  Blockchain(debug=True)

        chemin_fichier = input("Chemin blockchain : ")
        indice_bloc = int(input("Numero d'indice: "))
        print("ok")
        preuve = blockchain.charger_blockchain(chemin_blockchain).recuperer_preuve(chemin_fichier, indice_bloc)
        
        if preuve:
            print(f"La preuve de travail du fichier {chemin_fichier} : {preuve}")
        else:
            print(f"Le fichier {chemin_fichier} n'a pas été trouvé dans la blockchain.") 

    elif cas == 5:
        mdp = input("entrer un mot de passe: ")
        sel = utilitaire.generer_sel()
        print(f"le mot de passe dérivé est: {dérivation.derivee_cle(mdp, sel,  1000, 16)}")
    elif cas == 6:
        cle_publique, cle_privee, _, p = utilitaire.generer_cle_RSA()  
        print(f"la clé publique est:  {cle_publique}")
        print("\n")
        print(f"la clé privee est:  {cle_privee}")
    elif cas == 7:
        cle_publique_utilisateur = [
            8322774966592638746387077843240884880658439495212586322699413348776973938739983472870359906818607840724786263613337609764753921856764261840893461821421823624036905739213921878190398571387681263928454486301862966642799903833705934016720667231092859050524238135652700932799311093926338993515456895601121715786291256073630684525506090316129633416746953139121384712635855314343390245021482609677443710884755383707224506882900641464586007963384851463242481577145742000432532439966504084209739067536993369001098459151112624987717975545960207726512762078634922472828043388029941846799996970947018081078772330858726597386239,
            27532704725107762484043287590413379930420176372631418044319376032144481308249984504016411677702829269883730440998908738057818923102464982477288337248243885927193485205984394673045349793092662241941610203305925006246808615060509889649761284463666144044380973021230134687325214976755481283878163212571913105364912123087040019738288633689038890853047255356757980254666174504788202083828666647427935136732611109682031408989543269725997572037349745455631649780092070873128130766546791833796627755812317931338686007054117966836135490568632040863707824574697800335519642931698993120097856902249546284231969157111224159123881
        ]
        cle_privee_utilisateur = [
            2357670090582234957393913403462095536855291090561008593387477377974257356049040781885048599352931836980524142096360118091870363458290827806816024958964348422962908264009769823684366923566454042470526014247435690715747460865491416165539984231763000564065917090468414908077279656241939919886776607702768042800332817414819277177556199113030724048883892073634672107606933163006711426587392627346415992149173579646462862560548807390129395821326624272631391115775865610994383926153086989680966306101124461244025024204938796241183295505129046329076806670618613696942491126235362821631074138983053734662950390481591586051771,
            27532704725107762484043287590413379930420176372631418044319376032144481308249984504016411677702829269883730440998908738057818923102464982477288337248243885927193485205984394673045349793092662241941610203305925006246808615060509889649761284463666144044380973021230134687325214976755481283878163212571913105364912123087040019738288633689038890853047255356757980254666174504788202083828666647427935136732611109682031408989543269725997572037349745455631649780092070873128130766546791833796627755812317931338686007054117966836135490568632040863707824574697800335519642931698993120097856902249546284231969157111224159123881
        ]
        p = 153924065612313066522442360686143700962115579952275685502750434256676750622149912017912800493151424003121179349598713293534741658494729866419736425513735162693684047295219861805081585863343688332641545994597378104057255640312024309090674087826306369977084361457573367914742786466195068736262962800336972071707
        e, _ = cle_publique_utilisateur
        d_coffre_fort = 5097571888728103593164622013858836982973397381870706009217888219360246562615803553854275339948384161418454133403486198294494380175001021686447651460412216394919231569935294959131086223171990403207796039631701424151326466389120826766964848681864407875249074576140175810796075497085618059938565571525456198218462545181436834661182262001327894195228413584801162192897319244276628483575240376763304473057080152113931157323460396213293934693091205468248746896394728353779064689338038837425670818872936058587937213624660512779607846193221035193404279463631369391891323877222420538800458829307684194957037610723730719260467
        n_coffre_fort = 15327144862654827932872361301973263429501594471871178636832267538074640885368725020123977193538145840599185487729228248806900944522563797768529486776646127107808428467933304808161032706529237613448017966990600505965203751780150131976992712826552843184755910017604168669068127918022102245337869701624735594744241427407111175676395052671238658252206264307096726831504053793436257801766667007310521135114730640920687293046215086178570487129163053816678008501548841255342009323216133627841581574306229884898624968904658705317542447753624829768466308459980462846841360501321666699237363456687837193655456802579114512969233
        signature = pow(e, d_coffre_fort, n_coffre_fort)
        ZKP.protocole_guillou_quisquater(cle_publique_utilisateur, cle_privee_utilisateur, signature, p)
    elif cas == 8:
        cle_privee_coffre = [5097571888728103593164622013858836982973397381870706009217888219360246562615803553854275339948384161418454133403486198294494380175001021686447651460412216394919231569935294959131086223171990403207796039631701424151326466389120826766964848681864407875249074576140175810796075497085618059938565571525456198218462545181436834661182262001327894195228413584801162192897319244276628483575240376763304473057080152113931157323460396213293934693091205468248746896394728353779064689338038837425670818872936058587937213624660512779607846193221035193404279463631369391891323877222420538800458829307684194957037610723730719260467, 15327144862654827932872361301973263429501594471871178636832267538074640885368725020123977193538145840599185487729228248806900944522563797768529486776646127107808428467933304808161032706529237613448017966990600505965203751780150131976992712826552843184755910017604168669068127918022102245337869701624735594744241427407111175676395052671238658252206264307096726831504053793436257801766667007310521135114730640920687293046215086178570487129163053816678008501548841255342009323216133627841581574306229884898624968904658705317542447753624829768466308459980462846841360501321666699237363456687837193655456802579114512969233]
        cle_publique_coffre = [10104747957343224067392594793127590516604230127622892213110475758942003403064357996748869281243470359003236032296194115823918727269164839687104390455371579050906175240113014612227533158462108556198229981350291118855410190306039042219340134290422333032964359141281463588359795953866350181881278576438398057545925723787626375110031347620205713593793148117669676515808160442347321880234492213298730615262384887307997212708849317589036122089681139813435513591544939678152658272244855142973015247498262062832837541689294966300416539507944517371219353121732341616748553566510193957028828117885919255196110405346523289095015, 15327144862654827932872361301973263429501594471871178636832267538074640885368725020123977193538145840599185487729228248806900944522563797768529486776646127107808428467933304808161032706529237613448017966990600505965203751780150131976992712826552843184755910017604168669068127918022102245337869701624735594744241427407111175676395052671238658252206264307096726831504053793436257801766667007310521135114730640920687293046215086178570487129163053816678008501548841255342009323216133627841581574306229884898624968904658705317542447753624829768466308459980462846841360501321666699237363456687837193655456802579114512969233]
        cle_publique_utilisateur = [
            8322774966592638746387077843240884880658439495212586322699413348776973938739983472870359906818607840724786263613337609764753921856764261840893461821421823624036905739213921878190398571387681263928454486301862966642799903833705934016720667231092859050524238135652700932799311093926338993515456895601121715786291256073630684525506090316129633416746953139121384712635855314343390245021482609677443710884755383707224506882900641464586007963384851463242481577145742000432532439966504084209739067536993369001098459151112624987717975545960207726512762078634922472828043388029941846799996970947018081078772330858726597386239,
            27532704725107762484043287590413379930420176372631418044319376032144481308249984504016411677702829269883730440998908738057818923102464982477288337248243885927193485205984394673045349793092662241941610203305925006246808615060509889649761284463666144044380973021230134687325214976755481283878163212571913105364912123087040019738288633689038890853047255356757980254666174504788202083828666647427935136732611109682031408989543269725997572037349745455631649780092070873128130766546791833796627755812317931338686007054117966836135490568632040863707824574697800335519642931698993120097856902249546284231969157111224159123881
        ]
        cle_privee_utilisateur = [
            2357670090582234957393913403462095536855291090561008593387477377974257356049040781885048599352931836980524142096360118091870363458290827806816024958964348422962908264009769823684366923566454042470526014247435690715747460865491416165539984231763000564065917090468414908077279656241939919886776607702768042800332817414819277177556199113030724048883892073634672107606933163006711426587392627346415992149173579646462862560548807390129395821326624272631391115775865610994383926153086989680966306101124461244025024204938796241183295505129046329076806670618613696942491126235362821631074138983053734662950390481591586051771,
            27532704725107762484043287590413379930420176372631418044319376032144481308249984504016411677702829269883730440998908738057818923102464982477288337248243885927193485205984394673045349793092662241941610203305925006246808615060509889649761284463666144044380973021230134687325214976755481283878163212571913105364912123087040019738288633689038890853047255356757980254666174504788202083828666647427935136732611109682031408989543269725997572037349745455631649780092070873128130766546791833796627755812317931338686007054117966836135490568632040863707824574697800335519642931698993120097856902249546284231969157111224159123881
        ]
        key_exchange.diffie_hellmann(cle_privee_coffre, cle_publique_coffre, cle_privee_utilisateur, cle_publique_utilisateur)
        print(f"La cle de session est: {key_exchange.diffie_hellmann(cle_privee_coffre, cle_publique_coffre, cle_privee_utilisateur, cle_publique_utilisateur)}")
    elif cas == 9:
        print("A bientot")  
        return                                
    else:
      print("Cas non trouvé")
    
interface()